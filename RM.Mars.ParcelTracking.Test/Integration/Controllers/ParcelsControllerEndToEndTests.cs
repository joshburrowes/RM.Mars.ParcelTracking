using FluentAssertions;
using Microsoft.AspNetCore.Mvc;
using NSubstitute;
using Microsoft.Extensions.Logging;
using RM.Mars.ParcelTracking.Api.Controllers;
using RM.Mars.ParcelTracking.Api.Models.Requests;
using RM.Mars.ParcelTracking.Application.Services.Parcels;
using RM.Mars.ParcelTracking.Application.Services.StatusValidator;
using RM.Mars.ParcelTracking.Application.Services.Validation;
using RM.Mars.ParcelTracking.Common.Utils.DateTimeProvider;
using RM.Mars.ParcelTracking.Application.Enums;
using RM.Mars.ParcelTracking.Api.Models.Response;
using RM.Mars.ParcelTracking.Application.Models.Parcel;
using RM.Mars.ParcelTracking.Application.Models.AuditTrail;
using RM.Mars.ParcelTracking.Application.Models.Validation;

namespace RM.Mars.ParcelTracking.Test.Integration.Controllers
{
    //This test simulates a happy path end-to-end scenario for parcel lifecycle management.
    // It was generated by GitHub Copilot based on the existing unit tests and the controller code.
    [TestFixture]
    public class ParcelsControllerEndToEndTests
    {
        private IParcelService _parcelService;
        private IStatusValidation _statusValidation;
        private IParcelRequestValidation _parcelRequestValidation;
        private ILogger<ParcelsController> _logger;
        private ParcelsController _controller;
        private ParcelDto _parcel;
        private List<StatusAuditTrail> _history;

        [SetUp]
        public void Setup()
        {
            _parcelService = Substitute.For<IParcelService>();
            _statusValidation = Substitute.For<IStatusValidation>();
            _parcelRequestValidation = Substitute.For<IParcelRequestValidation>();
            _logger = Substitute.For<ILogger<ParcelsController>>();
            _controller = new ParcelsController(_parcelService, _logger, _parcelRequestValidation, _statusValidation);
            _history = new List<StatusAuditTrail>();
            _parcel = new ParcelDto
            {
                Barcode = "RMARS1234567890123456789M",
                Status = ParcelStatus.Created,
                LaunchDate = new DateTime(2025, 9, 3),
                EstimatedArrivalDate = new DateTime(2025, 12, 2),
                Origin = "Starport Thames Estuary",
                Destination = "New London",
                Sender = "Anders Hejlsberg",
                Recipient = "Elon Musk",
                Contents = "Signed C# language specification and a Christmas card",
                History = _history
            };
        }

        [Test]
        public async Task EndToEnd_HappyPath_ParcelLifecycle()
        {
            _parcelService = Substitute.For<IParcelService>();
            _statusValidation = Substitute.For<IStatusValidation>();
            _parcelRequestValidation = Substitute.For<IParcelRequestValidation>();
            _logger = Substitute.For<ILogger<ParcelsController>>();
            _controller = new ParcelsController(_parcelService, _logger, _parcelRequestValidation, _statusValidation);
            _history = new List<StatusAuditTrail>();
            _parcel = new ParcelDto
            {
                Barcode = "RMARS1234567890123456789M",
                Status = ParcelStatus.Created,
                LaunchDate = new DateTime(2025, 9, 3),
                EstimatedArrivalDate = new DateTime(2025, 12, 2),
                Origin = "Starport Thames Estuary",
                Destination = "New London",
                Sender = "Anders Hejlsberg",
                Recipient = "Elon Musk",
                Contents = "Signed C# language specification and a Christmas card",
                History = _history
            };

            // Set the system time for the "Created" status
            var dateTimeProvider = Substitute.For<IDateTimeProvider>();
            dateTimeProvider.UtcNow.Returns(new DateTime(2025, 8, 20));
            // Step 1: Create Parcel
            var createRequest = new CreateParcelRequest
            {
                Barcode = _parcel.Barcode,
                Sender = _parcel.Sender,
                Recipient = _parcel.Recipient,
                DeliveryService = "Express",
                Contents = _parcel.Contents
            };
            var createdResponse = new ParcelCreatedResponse
            {
                Barcode = _parcel.Barcode,
                Status = ParcelStatus.Created,
                LaunchDate = _parcel.LaunchDate,
                EtaDays = 90,
                EstimatedArrivalDate = _parcel.EstimatedArrivalDate,
                Origin = _parcel.Origin,
                Destination = _parcel.Destination,
                Sender = _parcel.Sender,
                Recipient = _parcel.Recipient,
                Contents = _parcel.Contents
            };
            _parcelRequestValidation.Validate(createRequest).Returns(new ValidationResponse { IsValid = true });
            _parcelService.ProcessParcelRequestAsync(createRequest).Returns(createdResponse);
            var postResult = await _controller.CreateParcel(createRequest) as CreatedAtActionResult;
            postResult.Should().NotBeNull();
            var postValue = postResult.Value as ParcelCreatedResponse;
            postValue.Should().BeEquivalentTo(createdResponse);

            // Step 2: OnRocketToMars
            var patchRequest1 = new UpdateParcelStatusRequest { NewStatus = nameof(ParcelStatus.OnRocketToMars) };
            _parcelService.GetParcelByBarcodeAsync(_parcel.Barcode).Returns(_parcel);
            _statusValidation.ValidateStatus(_parcel, patchRequest1.NewStatus)
                .Returns(new StatusValidationResponse { Valid = true, NewParcelStatus = ParcelStatus.OnRocketToMars });
            _parcelService.UpdateParcelStatus(_parcel, ParcelStatus.OnRocketToMars).Returns(true);
            _history.Add(new StatusAuditTrail { Status = ParcelStatus.Created, TimeStamp = "2025-08-20" });
            var patchResult1 = await _controller.UpdateStatus(_parcel.Barcode, patchRequest1);
            patchResult1.Should().BeOfType<OkResult>();
            _history.Add(new StatusAuditTrail { Status = ParcelStatus.OnRocketToMars, TimeStamp = "2025-09-03" });
            _parcel.Status = ParcelStatus.OnRocketToMars;

            // Step 3: LandedOnMars
            var patchRequest2 = new UpdateParcelStatusRequest { NewStatus = nameof(ParcelStatus.LandedOnMars) };
            _statusValidation.ValidateStatus(_parcel, patchRequest2.NewStatus)
                .Returns(new StatusValidationResponse { Valid = true, NewParcelStatus = ParcelStatus.LandedOnMars });
            _parcelService.UpdateParcelStatus(_parcel, ParcelStatus.LandedOnMars).Returns(true);
            var patchResult2 = await _controller.UpdateStatus(_parcel.Barcode, patchRequest2);
            patchResult2.Should().BeOfType<OkResult>();
            _history.Add(new StatusAuditTrail { Status = ParcelStatus.LandedOnMars, TimeStamp = "2025-12-02" });
            _parcel.Status = ParcelStatus.LandedOnMars;

            // Step 4: OutForMartianDelivery
            var patchRequest3 = new UpdateParcelStatusRequest { NewStatus = nameof(ParcelStatus.OutForMartianDelivery) };
            _statusValidation.ValidateStatus(_parcel, patchRequest3.NewStatus)
                .Returns(new StatusValidationResponse { Valid = true, NewParcelStatus = ParcelStatus.OutForMartianDelivery });
            _parcelService.UpdateParcelStatus(_parcel, ParcelStatus.OutForMartianDelivery).Returns(true);
            var patchResult3 = await _controller.UpdateStatus(_parcel.Barcode, patchRequest3);
            patchResult3.Should().BeOfType<OkResult>();
            _history.Add(new StatusAuditTrail { Status = ParcelStatus.OutForMartianDelivery, TimeStamp = "2025-12-02" });
            _parcel.Status = ParcelStatus.OutForMartianDelivery;

            // Step 5: Delivered
            var patchRequest4 = new UpdateParcelStatusRequest { NewStatus = nameof(ParcelStatus.Delivered) };
            _statusValidation.ValidateStatus(_parcel, patchRequest4.NewStatus)
                .Returns(new StatusValidationResponse { Valid = true, NewParcelStatus = ParcelStatus.Delivered });
            _parcelService.UpdateParcelStatus(_parcel, ParcelStatus.Delivered).Returns(true);
            var patchResult4 = await _controller.UpdateStatus(_parcel.Barcode, patchRequest4);
            patchResult4.Should().BeOfType<OkResult>();
            _history.Add(new StatusAuditTrail { Status = ParcelStatus.Delivered, TimeStamp = "2025-12-02" });
            _parcel.Status = ParcelStatus.Delivered;

            // Step 6: GET
            _parcelService.GetParcelByBarcodeAsync(_parcel.Barcode).Returns(_parcel);
            var getResult = await _controller.GetParcel(_parcel.Barcode) as OkObjectResult;
            getResult.Should().NotBeNull();
            var getValue = getResult!.Value as ParcelDto;
            getValue.Should().NotBeNull();
            var expectedHistory = new List<StatusAuditTrail>
            {
                new StatusAuditTrail { Status = ParcelStatus.Created, TimeStamp = "2025-08-20" },
                new StatusAuditTrail { Status = ParcelStatus.OnRocketToMars, TimeStamp = "2025-09-03" },
                new StatusAuditTrail { Status = ParcelStatus.LandedOnMars, TimeStamp = "2025-12-02" },
                new StatusAuditTrail { Status = ParcelStatus.OutForMartianDelivery, TimeStamp = "2025-12-02" },
                new StatusAuditTrail { Status = ParcelStatus.Delivered, TimeStamp = "2025-12-02" }
            };
            getValue!.History.Should().BeEquivalentTo(expectedHistory);
            getValue.Should().BeEquivalentTo(new ParcelDto
            {
                Barcode = _parcel.Barcode,
                Status = ParcelStatus.Delivered,
                LaunchDate = new DateTime(2025, 9, 3),
                EstimatedArrivalDate = new DateTime(2025, 12, 2),
                Origin = "Starport Thames Estuary",
                Destination = "New London",
                Sender = "Anders Hejlsberg",
                Recipient = "Elon Musk",
                Contents = "Signed C# language specification and a Christmas card",
                History = expectedHistory
            }, options => options.ExcludingMissingMembers());
        }
    }
}
